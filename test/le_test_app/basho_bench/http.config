{mode, {rate_delayed, 1, 4}}.
%{mode, max}.

{duration, 20}.

{concurrent, 20}.

{driver, basho_bench_driver_http}.

%% Default generators, reference by the atoms key_generator and value_generator
{key_generator, {int_to_str, {partitioned_sequential_int, 50000}}}.

%%% Generators: {Name, KeyGen | ValGen}
% Name: atom()
% KeyGen: User or Basho Bench defined key generator
% ValGen: User or Basho Bench defined value generator
{generators, [
              {book_id, {key_generator, {int_to_str, {uniform_int, 1, 5}}}},
              {chapter_book_id, {key_generator, {int_to_str, {uniform_int, 2, 4}}}},
              {chapter_num, {key_generator, {int_to_str, {uniform_int, 1, 10}}}}
             ]}.

%%% Values: {Name, Value}
%%%         {Name, {FormattedValue, Generators}}
% Name: atom()
% Value: string() | atom() - named generator, can be key_generator or value_generator for default
% FormattedValue: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{values, [

         ]}.

%%% Headers: {Name, Headers}
% Name: atom()
% Headers: proplist()
{headers, [
           %% {json_h, [{'Content-Type', 'application/json'}, {'Accept', 'application/json'}]},
           %% {xml_h, [{'Content-Type', 'application/xml'}]},
           %% {binary_h, [{'Content-Type', 'application/octet-stream'}]},
           {empty_h, []}
          ]}.

%%% Targets: {Name, {Host, Port, Path}}
%%%          {Name, [{Host1, Port1, Path1},{Host2, Port2, Path2},...]}
%%%          {Name, {Host, Port, {FormattedPath, Generators}}}
%%%          {Name, [{Host1, Port1, {FormattedPath1, Generators1}},{Host2, Port2, {FormattedPath2, Generators2}},...]}
% Name: atom()
% Host: string()
% Port: integer()
% Path: string()
% FormattedPath: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{targets, [
           {book_names, {"localhost", 8888, "/books"}},
           {book, {"localhost", 8888, {"/book/~s", [book_id]}}},
           {chapter, {"localhost", 8888, {"/book/~s/chapter/~s", [chapter_book_id, chapter_num]}}}
          ]}.

%%% Operations: {{get|delete, Target}, Weight}
%%%             {{get|delete, Target, Header}, Weight}
%%%             {{put|post, Target, Value}, Weight}
%%%             {{put|post, Target, Value, Header}, Weight}
% Target: atom() - defined target
% Header: atom() - defined header
% Value: atom() - defined value
% Weight: integer() - ratio of this operation to the rest (ThisWeight / TotalWeightSum = % of this Operation)

{operations, [
              %% Get books which essentially are just a list of names in a json object
              {{get, book_names, empty_h}, 7},
              %% Get book a watermarked book, which consists in reading the compressed book from disk,
              %% decompressing it to add the watermark and finally compress the result
              {{get, book}, 1},
              %% Get a chapter from the book, which consists in reading the compressed book from disk,
              %% decompressing it, apply a regex to extract the chapter and finally compressing the chapter
              {{get, chapter}, 2}
             ]}.
