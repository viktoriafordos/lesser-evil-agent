{mode, {rate, 10}}.
%{mode, max}.

{duration, 10}.

{concurrent, 5}.

{driver, basho_bench_driver_http}.

{http_request_timeout, 250000}.

%% Default generators, reference by the atoms key_generator and value_generator
{key_generator, {int_to_str, {partitioned_sequential_int, 500000000000}}}.

%%% Generators: {Name, KeyGen | ValGen}
% Name: atom()
% KeyGen: User or Basho Bench defined key generator
% ValGen: User or Basho Bench defined value generator
{generators, [
              {tiny, {key_generator, {int_to_str, {uniform_int  , 989     , 999}}}},
              {small, {key_generator, {int_to_str, {uniform_int , 9989   , 9999}}}},
              {medium, {key_generator, {int_to_str, {uniform_int, 99989  , 99999}}}},
              {large, {key_generator, {int_to_str, {uniform_int , 999989 , 999999}}}},
              {huge, {key_generator, {int_to_str, {uniform_int , 9999989, 9999999}}}}
             ]}.

%%% Values: {Name, Value}
%%%         {Name, {FormattedValue, Generators}}
% Name: atom()
% Value: string() | atom() - named generator, can be key_generator or value_generator for default
% FormattedValue: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{values, [
         ]}.

%%% Headers: {Name, Headers}
% Name: atom()
% Headers: proplist()
{headers, [
           %% {json_h, [{'Content-Type', 'application/json'}, {'Accept', 'application/json'}]},
           %% {xml_h, [{'Content-Type', 'application/xml'}]},
           {empty_h, []}
          ]}.

%%% Targets: {Name, {Host, Port, Path}}
%%%          {Name, [{Host1, Port1, Path1},{Host2, Port2, Path2},...]}
%%%          {Name, {Host, Port, {FormattedPath, Generators}}}
%%%          {Name, [{Host1, Port1, {FormattedPath1, Generators1}},{Host2, Port2, {FormattedPath2, Generators2}},...]}
% Name: atom()
% Host: string()
% Port: integer()
% Path: string()
% FormattedPath: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{targets, [
           {tiny_endpoint, {"localhost", 8888, {"/book-validation/~s", [tiny]}}},
           {small_endpoint, {"localhost", 8888, {"/book-validation/~s", [small]}}},
           {medium_endpoint, {"localhost", 8888, {"/book-validation/~s", [medium]}}},
           {large_endpoint, {"localhost", 8888, {"/book-validation/~s", [large]}}},
           {huge_endpoint, {"localhost", 8888, {"/book-validation/~s", [huge]}}}
          ]}.

%%% Operations: {{get|delete, Target}, Weight}
%%%             {{get|delete, Target, Header}, Weight}
%%%             {{put|post, Target, Value}, Weight}
%%%             {{put|post, Target, Value, Header}, Weight}
% Target: atom() - defined target
% Header: atom() - defined header
% Value: atom() - defined value
% Weight: integer() - ratio of this operation to the rest (ThisWeight / TotalWeightSum = % of this Operation)

{operations, [
              %%{{post, endpoint, text_1kb_v, text_h}, 1},
              {{get, tiny_endpoint}, 2},
              {{get, small_endpoint}, 4},
              {{get, medium_endpoint}, 2},
              {{get, large_endpoint}, 2}
              %{{get, huge_endpoint}, 1}
             ]}.
